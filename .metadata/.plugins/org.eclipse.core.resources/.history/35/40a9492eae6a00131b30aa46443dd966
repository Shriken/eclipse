import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;

import javax.swing.JFrame;

public class Perlin {

	public static void main(String[] args) {
		
		JFrame frame = new JFrame("Perlin");
		PerlinCanvas canvas = new PerlinCanvas(frame);

		frame.add(canvas);
		frame.pack();
		frame.setResizable(false);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
		
		double[] noise = generateNoise(canvas.getPreferredSize());
		canvas.render(noise);
		for (double d : noise)
			System.out.println(d);
	}
	
	public static double[] generateNoise(Dimension size) {

		double[] noise = new double[size.width];
		double persistence = 0.25;
		int width = size.width;
		int depth = 6;
		
		for (int d = 0; d < depth; d++) {
			double frequency = 8 * Math.pow(2, d);
			double[] keys = new double[(int)frequency];
			double[] oNoise = new double[width];
			
			for (int i = 0; i < frequency; i++)
				keys[i] = Math.random();
			for (int i = 0; i < width; i++) {
				int index = (int) (i * frequency / width);
				if (index+1 >= (int)frequency)
					oNoise[i] = keys[index];
				else 
					oNoise[i] = cosInterpolate(keys[index],
					                           keys[index+1],
					                           (i % frequency) / frequency);
				noise[i] = oNoise[i] * Math.pow(persistence, d) / (4 / 3) * 1000;
			}
		}
		
		return noise;
	}
	
	public static double cosInterpolate(double a, double b, double x) {
		double ft = x * Math.PI;
		double f = (1 - Math.cos(ft)) * .5;
	
		return  a*(1-f) + b*f;
	}private static final int WIDTH = 800;
	private static final int HEIGHT = 600;

	public PerlinCanvas(JFrame frame) {
		Dimension size = new Dimension(WIDTH, HEIGHT);
		frame.setPreferredSize(size);
		frame.setMinimumSize(size);
		frame.setMaximumSize(size);
		setPreferredSize(size);
		setMinimumSize(size);
		setMaximumSize(size);
	}
	
	public static void render(Grahpics g, double[] data) {
		if (data.length != HEIGHT)
			return;
		
		Graphics g = getGraphics();
		for (int i = 0; i < WIDTH; i++) {
			g.setColor(new Color(0f, 0f, (float)data[i]));
			g.fillRect(i, 0, 1, HEIGHT);
		}
		g.setColor(Color.RED);
		g.fillRect(0,  0, 10, 10);
	}
}
